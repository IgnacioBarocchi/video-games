/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.11 assets/models/Barrier/Barrier_lr.glb -t -r public
*/

import * as THREE from "three";
import React, { useMemo, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import barrierLowRes from "../../../assets/models/Barrier/Barrier_lr.glb";
import { SkeletonUtils } from "three-stdlib";
import { useGraph } from "@react-three/fiber";
type GLTFResult = GLTF & {
  nodes: {
    BARRIER_MESH: THREE.Mesh;
    BARRIER_MESH_1: THREE.Mesh;
    BARRIER_MESH_2: THREE.Mesh;
    BARRIER_MESH_3: THREE.Mesh;
  };
  materials: {
    Road_Props_Yellow_Signal: THREE.MeshBasicMaterial;
    Road_Props_Yellow_Signal_Shade: THREE.MeshBasicMaterial;
    High_Concrete: THREE.MeshBasicMaterial;
    Concrete: THREE.MeshBasicMaterial;
  };
};

export function BarrierLowRes3DModel(props: JSX.IntrinsicElements["group"]) {
  const { scene, materials } = useGLTF(barrierLowRes) as GLTFResult;
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes } = useGraph(clone);
  return (
    <group {...props} dispose={null}>
      <group scale={[1, 0.59, 1]}>
        <mesh
          geometry={nodes.BARRIER_MESH.geometry}
          material={materials.Road_Props_Yellow_Signal}
        />
        <mesh
          geometry={nodes.BARRIER_MESH_1.geometry}
          material={materials.Road_Props_Yellow_Signal_Shade}
        />
        <mesh
          geometry={nodes.BARRIER_MESH_2.geometry}
          material={materials.High_Concrete}
        />
        <mesh
          geometry={nodes.BARRIER_MESH_3.geometry}
          material={materials.Concrete}
        />
      </group>
    </group>
  );
}

useGLTF.preload(barrierLowRes);
