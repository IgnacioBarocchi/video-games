import * as THREE from "three";

import { useMemo } from "react";

import { GLTF } from "three-stdlib";
import { SkeletonUtils } from "three-stdlib";
import { memo } from "react";
import treeModelFile from "../../../assets/models/Tree/Tree.glb";
import { useGLTF } from "@react-three/drei";
import { useGraph } from "@react-three/fiber";
import { ROAD_LENGTH } from "game-constants";

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.11 src/assets/Tree/Tree.glb -t -r public
*/

type GLTFResult = GLTF & {
  nodes: {
    BARK_MESH: THREE.Mesh;
    BARK_MESH_1: THREE.Mesh;
    BARK_MESH_2: THREE.Mesh;
    GRASS: THREE.Mesh;
    LEAVES_MESH: THREE.Mesh;
    LEAVES_MESH_1: THREE.Mesh;
  };
  materials: {
    Tree_Mid: THREE.MeshBasicMaterial;
    Tree_High: THREE.MeshBasicMaterial;
    Tree_Dark: THREE.MeshBasicMaterial;
    Grass: THREE.MeshBasicMaterial;
    Tree_Leaves_Dark: THREE.MeshBasicMaterial;
    Tree_Leaves_High: THREE.MeshBasicMaterial;
  };
};

export function TreeModel(props: JSX.IntrinsicElements["group"]) {
  const { scene, materials } = useGLTF(treeModelFile) as GLTFResult;

  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes } = useGraph(clone);

  return (
    <>
      <group {...props} scale={0.5}>
        <group position={[0, 1.03, 0]}>
          <mesh
            geometry={nodes.BARK_MESH.geometry}
            material={materials.Tree_Mid}
          />
          <mesh
            geometry={nodes.BARK_MESH_1.geometry}
            material={materials.Tree_High}
          />
          <mesh
            geometry={nodes.BARK_MESH_2.geometry}
            material={materials.Tree_Dark}
          />
        </group>
        <mesh
          geometry={nodes.GRASS.geometry}
          material={materials.Grass}
          position={[0.02, 2.9, 0]}
          rotation={[-Math.PI / 2, Math.PI / 2, 0]}
          scale={[30.16, 30.16, 14.84]}
        />
        <group position={[-7.09, 21.23, -0.97]} scale={[-2.81, -1.09, -2.81]}>
          <mesh
            geometry={nodes.LEAVES_MESH.geometry}
            material={materials.Tree_Leaves_Dark}
          />
          <mesh
            geometry={nodes.LEAVES_MESH_1.geometry}
            material={materials.Tree_Leaves_High}
          />
        </group>
      </group>
    </>
  );
}

useGLTF.preload(treeModelFile);

const MIN_X = 11;
const MAX_X = 20;
const MIN_Y = 0;
const MAX_Y = 2;
export const Trees = memo(() => {
  return (
    <group position={[0, 0, ROAD_LENGTH - 50]}>
      {[...Array(50)].map((_, i) => (
        <TreeModel
          rotation={[0, THREE.MathUtils.degToRad(Math.random() * 180), 0]}
          dispose={null}
          key={i + "R"}
          position={[
            Math.floor(Math.random() * (MAX_X - MIN_X) + MIN_X),
            Math.floor(Math.random() * (MAX_Y - MIN_Y) + MIN_Y),
            i * -Math.floor(Math.random() * (100 - 50) + 50) - 2,
          ]}
        />
      ))}
      {[...Array(50)].map((_, i) => (
        <TreeModel
          rotation={[0, THREE.MathUtils.degToRad(Math.random() * 180), 0]}
          dispose={null}
          key={i + "L"}
          position={[
            -Math.floor(Math.random() * (MAX_X - MIN_X) + MIN_X),
            Math.floor(Math.random() * (MAX_Y - MIN_Y) + MIN_Y),
            i * -Math.floor(Math.random() * (100 - 50) + 50) - 2,
          ]}
        />
      ))}
    </group>
  );
});
