/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.11 assets/models/CarWSkin.glb -t -r public
*/

import * as THREE from "three";
import React, { forwardRef, memo, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame } from "@react-three/fiber";
import { PlayerObjectReferences } from "../car-player/car-player";
import carWithSkin3DModelFile from "../../assets/models/CarWSkin.glb";

export type GLTFResult = GLTF & {
  nodes: {
    CAR_BODY: THREE.Mesh;
    FRONT_WHEEL: THREE.Mesh;
    BACK_WHEELS: THREE.Mesh;
  };
  materials: {
    Skin: THREE.MeshBasicMaterial;
    Wheel_Skin: THREE.MeshBasicMaterial;
  };
};

const Wheels = forwardRef(
  ({ nodes, materials }, ref: PlayerObjectReferences) => {
    const frontWheelsRef = useRef();
    const backWheelsRef = useRef();

    useFrame((_, delta) => {
      if (!ref?.current?.rigidbody?.current) {
        return;
      }

      const forwardAxisSpeed = ref?.current?.rigidbody?.current.linvel().z;

      const wheelRotationX = forwardAxisSpeed * delta;

      if (backWheelsRef.current) {
        backWheelsRef.current.rotation.x += wheelRotationX;
      }

      if (frontWheelsRef.current) {
        frontWheelsRef.current.rotation.x += wheelRotationX;
      }
    });

    return (
      <>
        <mesh
          ref={frontWheelsRef}
          geometry={nodes.FRONT_WHEEL.geometry}
          material={materials.Wheel_Skin}
          position={[0, 0.36, 1.4]}
        />
        <mesh
          ref={backWheelsRef}
          geometry={nodes.BACK_WHEELS.geometry}
          material={materials.Wheel_Skin}
          position={[0, 0.36, -1.53]}
        />
      </>
    );
  }
);

const CarBody = forwardRef(
  ({ nodes, materials }, ref: PlayerObjectReferences) => {
    const carBodyRef = useRef();
    const timeRef = useRef(0);

    useFrame((_, delta) => {
      if (!ref?.current?.rigidbody?.current) {
        return;
      }

      // Update time
      timeRef.current += delta;

      // Oscillation effect using sine or cosine function
      const oscillationSpeed = 5; // Speed of the oscillation
      const oscillationMagnitude = 0.025; // Magnitude of the oscillation

      const upDownOffset =
        Math.sin(timeRef.current * oscillationSpeed) * oscillationMagnitude;
      const frontBackOffset =
        Math.cos(timeRef.current * oscillationSpeed) * oscillationMagnitude;

      const sidesAxisSpeed = THREE.MathUtils.degToRad(
        THREE.MathUtils.clamp(
          ref?.current?.rigidbody?.current.linvel().x,
          -3,
          3
        )
      );

      if (carBodyRef.current) {
        carBodyRef.current.rotation.z = sidesAxisSpeed;
        carBodyRef.current.position.y = 0.55 + upDownOffset;
        carBodyRef.current.position.z = 2.05 + frontBackOffset;
      }
    });

    return (
      <group dispose={null} ref={carBodyRef}>
        <mesh
          geometry={nodes.CAR_BODY.geometry}
          material={materials.Skin}
          position={[0, -0.5, -2.05]}
        />
      </group>
    );
  }
);

export const CarModelWSkin = memo(
  forwardRef<{}, PlayerObjectReferences>((_, ref) => {
    const { nodes, materials } = useGLTF(carWithSkin3DModelFile) as GLTFResult;

    return (
      <>
        <group ref={ref.current.modelRef} dispose={null}>
          <CarBody nodes={nodes} materials={materials} ref={ref} />
          <Wheels nodes={nodes} materials={materials} ref={ref} />
        </group>
      </>
    );
  })
);

useGLTF.preload(carWithSkin3DModelFile);
