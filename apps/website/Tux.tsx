/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.11 src/assets/models/linux/Tux.glb -t -r public
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    BODY_MESH: THREE.Mesh
    BODY_MESH_1: THREE.Mesh
    BODY_MESH_2: THREE.Mesh
    BODY_MESH_3: THREE.Mesh
    BODY_MESH_4: THREE.Mesh
    BODY_MESH_5: THREE.Mesh
    BODY_MESH_6: THREE.Mesh
  }
  materials: {
    Zombie_Skin: THREE.MeshBasicMaterial
    Zombie_Skin_Shade2: THREE.MeshBasicMaterial
    Yellow_Skin: THREE.MeshBasicMaterial
    Blood: THREE.MeshBasicMaterial
    Eyes: THREE.MeshBasicMaterial
    Zombie_Skin_Light: THREE.MeshBasicMaterial
    Blood_Shade: THREE.MeshBasicMaterial
  }
}

export function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/../src/assets/models/linux/Tux.glb') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <group position={[0, 0, -0.06]} scale={1.36}>
        <mesh geometry={nodes.BODY_MESH.geometry} material={materials.Zombie_Skin} />
        <mesh geometry={nodes.BODY_MESH_1.geometry} material={materials.Zombie_Skin_Shade2} />
        <mesh geometry={nodes.BODY_MESH_2.geometry} material={materials.Yellow_Skin} />
        <mesh geometry={nodes.BODY_MESH_3.geometry} material={materials.Blood} />
        <mesh geometry={nodes.BODY_MESH_4.geometry} material={materials.Eyes} />
        <mesh geometry={nodes.BODY_MESH_5.geometry} material={materials.Zombie_Skin_Light} />
        <mesh geometry={nodes.BODY_MESH_6.geometry} material={materials.Blood_Shade} />
      </group>
    </group>
  )
}

useGLTF.preload('/../src/assets/models/linux/Tux.glb')
