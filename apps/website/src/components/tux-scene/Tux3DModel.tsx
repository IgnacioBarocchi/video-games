/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.11 src/assets/models/linux/Tux.glb -t -r public
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import tux3DModelFile from "../../assets/models/linux/Tux.glb";
import { GroupProps, useFrame } from "@react-three/fiber";
import { Vector3 } from "three";
import { useTurnTable } from "../../hooks/use-turn-table";

type GLTFResult = GLTF & {
  nodes: {
    BODY: THREE.Mesh;
    BELLY: THREE.Mesh;
    FEET: THREE.Mesh;
    ARMS: THREE.Mesh;
    Plane006: THREE.Mesh;
    Plane006_1: THREE.Mesh;
    EYES_MESH: THREE.Mesh;
    EYES_MESH_1: THREE.Mesh;
    NOSTRILS: THREE.Mesh;
  };
  materials: {
    Darkest: THREE.MeshBasicMaterial;
    Concrete_2: THREE.MeshBasicMaterial;
    Road_Props_Yellow_Signal: THREE.MeshBasicMaterial;
  };
};

export function Tux3DModel(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(tux3DModelFile) as GLTFResult;
  const { group } = useTurnTable();

  return (
    <group {...props} dispose={null} ref={group}>
      <mesh geometry={nodes.BODY.geometry} material={materials.Darkest} />
      <mesh geometry={nodes.BELLY.geometry} material={materials.Concrete_2} />
      <mesh
        geometry={nodes.FEET.geometry}
        material={materials.Road_Props_Yellow_Signal}
      />
      <mesh geometry={nodes.ARMS.geometry} material={materials.Darkest} />
      <mesh geometry={nodes.NOSTRILS.geometry} material={materials.Darkest} />
      <mesh
        geometry={nodes.Plane006.geometry}
        material={materials.Road_Props_Yellow_Signal}
      />
      <mesh geometry={nodes.Plane006_1.geometry} material={materials.Darkest} />
      <mesh
        geometry={nodes.EYES_MESH.geometry}
        material={materials.Concrete_2}
      />
      <mesh
        geometry={nodes.EYES_MESH_1.geometry}
        material={materials.Darkest}
      />
    </group>
  );
}

useGLTF.preload(tux3DModelFile);
