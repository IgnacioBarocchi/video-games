/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.11 src/assets/models/mac/MacOS.glb -t -r public
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import macOS3DFile from "../../../assets/models/mac/MacOS.glb";
import { useTurnTable } from "../../../hooks/use-turn-table";

type GLTFResult = GLTF & {
  nodes: {
    Plane: THREE.Mesh;
    Plane_1: THREE.Mesh;
    Plane_2: THREE.Mesh;
    Plane_3: THREE.Mesh;
    Plane_4: THREE.Mesh;
    Plane_5: THREE.Mesh;
    Plane_6: THREE.Mesh;
    Plane_7: THREE.Mesh;
  };
  materials: {
    Zombie_base: THREE.MeshBasicMaterial;
    Zombie_2: THREE.MeshBasicMaterial;
    Zombie_3: THREE.MeshBasicMaterial;
    Socket: THREE.MeshBasicMaterial;
    Blood_shade: THREE.MeshBasicMaterial;
    Blood: THREE.MeshBasicMaterial;
    Black: THREE.MeshBasicMaterial;
    White: THREE.MeshBasicMaterial;
  };
};

export function MacOS3DModel(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(macOS3DFile) as GLTFResult;
  const { group } = useTurnTable();

  return (
    <group {...props} dispose={null} ref={group}>
      <group rotation={[Math.PI / 2, 0, 0]} scale={0.07}>
        <mesh
          geometry={nodes.Plane.geometry}
          material={materials.Zombie_base}
        />
        <mesh geometry={nodes.Plane_1.geometry} material={materials.Zombie_2} />
        <mesh geometry={nodes.Plane_2.geometry} material={materials.Zombie_3} />
        <mesh geometry={nodes.Plane_3.geometry} material={materials.Socket} />
        <mesh
          geometry={nodes.Plane_4.geometry}
          material={materials.Blood_shade}
        />
        <mesh geometry={nodes.Plane_5.geometry} material={materials.Blood} />
        <mesh geometry={nodes.Plane_6.geometry} material={materials.Black} />
        <mesh geometry={nodes.Plane_7.geometry} material={materials.White} />
      </group>
    </group>
  );
}

useGLTF.preload(macOS3DFile);
